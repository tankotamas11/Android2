4
Variables declared with var are final, those with val are not.
Variables declared with val are final, those with var are not.
var is scoped to the nearest function block and val is scoped to the nearest enclosing block.
Variables declared with val can only access const members.
What is the difference between val and var in Kotlin?
2
4
An auto-generated toString() method.
Auto-generated hashcode() and equals() methods.
Automatic conversion from/to JSON.
A generated copy method, to create copies of instances.
What does a data class not offer?
3
4
JVM
LLVM
.NET CLR
JavaScript
Which of these targets does Kotlin currently not support?
3
4
They provide asynchronous code without thread blocking.
It's Kotlin's term for class methods.
These are functions which accept other functions as arguments or return them.
That's how the automatically generated methods hashCode() and equals() in data classes are called.
What are Kotlin coroutines?
1
4
int i = 42
let i = 42
var i : int = 42
var i : Int = 42
What is the correct way to declare a variable of integer type in Kotlin?
4
4
val l: Long = "42".toLong()
val l: Long = Long.parseLong("42")
val l: Long = <Long>"42"
val l: Long = (Long)"42"
What is the correct syntax to convert the String "42" to a Long in Kotlin?
1
4
Yes, but Kotlin internally always converts them to their non-primitive counterparts.
No, not at language level. But the Kotlin compiler makes use of JVM primitives for best performance.
Yes, Kotlin is similar to Java in this respect.
No, Kotlin does not have nor use primitive data types.
Does Kotlin have primitive data types, such as int, long, float?
2
4
Kotlin can easily call Java code and vice versa.
Kotlin provides a compatibility layer for Java interoperability which comes with some cost at runtime.
While Kotlin runs on the JVM, it cannot interoperate with Java.
Kotlin can easily call Java code while Java cannot access code written in Kotlin.
What about Java interoperability?
1
4
function sum(a: Int, b: Int): Int
fun sum(a: Int, b: Int): Int
int sum(int a, int b)
int sum(a: Int, b: Int)
Which is a valid function declaration in Kotlin?
2
4
It's the modulo operator in Kotlin, similar to Java's %
It compares two values for identity rather than equality.
It converts any value to a non-null type and throws an exception if the value is in fact null
It returns the left-hand operand if the operand is not null; otherwise it returns the right hand operand.
What does the !! operator do?
3